#!/usr/bin/env ruby

require 'colorize'

github_user = '<%= options['github_id'] %>'
opts = {}
opts[:copy] = false

# --------------------
#
#     Helper Methods
#

def pbcopy(input)
  str = input.to_s
  IO.popen('pbcopy', 'w') { |f| f << str }
  str
end

def pbpaste
  `pbpaste`
end

def git_repo_url_for(user, repo)
    "git@github.com:#{user}/#{repo}.git"
end

# This nifty ruby snippet is copied and modified
# from defunkt's dotjs repository.
# Source: https://github.com/defunkt/dotjs/blob/master/Rakefile
def prompt( ask = "" )
  answer = nil

  puts ask
  begin
    until %w( k ok y yes n no ).include?(answer = $stdin.gets.chomp.downcase)
      puts "(psst... please type y or n)"
      puts ask
    end
  rescue Interrupt
    return false
  end

  return false if answer =~ /n/

  return true
end

# --------------------
#
#     'hub'
#

args = ARGV.dup

display_help = false

first_arg = args[0]
if !first_arg.nil? and first_arg[0] == "-" # It's an option
    args.shift
    if first_arg == "--copy"
        opts[:copy] = true
    elsif first_arg == "--add"
        opts[:add] = true
    elsif first_arg == "--help"
        display_help = true
    end
end

if args.empty? or display_help
    # TODO : Display help
    help_text = <<EOF
        Oops, you're using this all wrong.
        And I haven't written anything useful in this
        help text to help you work out what to do...
        So, yeah...take a look at the 'hub' command :)
EOF
    print help_text.red
    exit(0)
end

input = args[0].split('/')

repo = nil
if input.size > 1
  user  = input[0]
  repo = input[1]
else
  user = github_user
  repo = input[0]
end

repo_url = git_repo_url_for(user, repo)
repo_url_in_color = git_repo_url_for(user.blue, repo.blue)

if opts[:copy]
    pbcopy(repo_url)
    puts "Copied #{repo_url.blue} to your clipboard!"
elsif opts[:add]
    unless File.exist?(".git")
        puts "Oops, this place does not seem to have a git repo.".red
        exit(1)
    end

    add_repo = false

    # Check if this repo exists
    %x( git ls-remote #{repo_url} &>/dev/null )
    unless $?.exitstatus == 0
        # Is this a repo the user think he owns?
        if github_user == user
            # Offer to create a new repo for him
            puts "Looks like you haven't created this repo yet.".yellow

            # Is 'gh' installed
            %x( which gh &>/dev/null )
            if $?.exitstatus == 0
                create_repo = prompt("Would you like me to set that up for you? (y/n)".yellow)

                if create_repo
                    puts "Creating ".yellow + user.blue + "/".yellow + repo.blue + "...".yellow
                    %x( gh repo --new #{repo} )
                    add_repo = true
                else
                    add_repo = prompt("Would you like to add this remote repository anyway? (y/n)".yellow)
                end
            else
                puts "Looks like you don't have the 'gh' tool installed.".red
                puts "I can't create remote repository for you.".red
                puts "You can install it by running '".yellow + "brew install gh".blue + "'.".yellow
                add_repo = prompt("Would you like to add this remote repository anyway? (y/n)".yellow)
            end
        else
            puts "I'm sorry that repository doesn't seem to exist.".red
            add_repo = prompt("Would you like to add it anyway? (y/n)".yellow)
        end
    else
        add_repo = true
    end

    if add_repo
        puts "Adding remote origin: ".light_yellow + repo_url_in_color
        %x( git remote add origin #{repo_url} )
    else
        puts "Aborting without taking any action.".red
        exit(1)
    end
else
    puts "Assuming you mean '".light_yellow +
         user.blue +
         "/".light_yellow +
         repo.blue +
         "'.".light_yellow
    %x( git clone #{repo_url} )
end
