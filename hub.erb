#!/usr/bin/env ruby

require 'colorize'

user = '<%= options['github_id'] %>'
opts = {}
opts[:copy] = false

def pbcopy(input)
  str = input.to_s
  IO.popen('pbcopy', 'w') { |f| f << str }
  str
end

def pbpaste
  `pbpaste`
end

def git_repo_url_for(user, repo)
    "git@github.com:#{user}/#{repo}.git"
end

args = ARGV.dup

display_help = false

first_arg = args[0]
if !first_arg.nil? and first_arg[0] == "-" # It's an option
    args.shift
    if first_arg == "--copy"
        opts[:copy] = true
    elsif first_arg == "--add"
        opts[:add] = true
    elsif first_arg == "--help"
        display_help = true
    end
end

if args.empty? or display_help
    # TODO : Display help
    help_text = <<EOF
        Oops, you're using this all wrong.
        And I haven't written anything useful in this
        help text to help you work out what to do...
        So, yeah...take a look at the 'hub' command :)
EOF
    print help_text.red
    exit(0)
end

input = args[0].split('/')

repo = nil
if input.size > 1
  user  = input[0]
  repo = input[1]
else
  repo = input[0]
end

repo_url = git_repo_url_for(user, repo)
repo_url_in_color = git_repo_url_for(user.blue, repo.blue)

if opts[:copy]
    pbcopy(repo_url)
    puts "Copied #{repo_url.blue} to your clipboard!"
elsif opts[:add]
    unless File.exist?(".git")
        puts "Oops, this place does not seem to have a git repo.".red
        exit(1)
    end
    puts "Adding remote origin: ".light_yellow + repo_url_in_color
    %x( git remote add origin #{repo_url} )
else
    puts "Assuming you mean '".light_yellow +
         user.blue +
         "/".light_yellow +
         repo.blue +
         "'.".light_yellow
    %x( git clone #{repo_url} )
end
