#!/usr/bin/env ruby

require 'colorize'

GITHUB_USER = '<%= options['github_id'] %>'
OPTIONS = {}
OPTIONS[:copy] = false

# --------------------
#
#     Helper Methods
#

def pbcopy(input)
  str = input.to_s
  IO.popen('pbcopy', 'w') { |f| f << str }
  str
end

def pbpaste
  `pbpaste`
end

def git_repo_url_for(user, repo)
    "git@github.com:#{user}/#{repo}.git"
end

def license
    year = Time.now.strftime("%Y")
    name = %x( git config user.name )

    if name.empty?
        puts "Please setup 'user.name' in git-config.".red
        exit(1)
    end

    license_txt = <<EOF
The MIT License (MIT)

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

    license_txt.gsub!("[year]", year)
    license_txt.gsub!("[fullname]", name)

    return license_txt
end

# This nifty ruby snippet is copied and modified
# from defunkt's dotjs repository.
# Source: https://github.com/defunkt/dotjs/blob/master/Rakefile
def prompt( ask = "" )
  answer = nil

  puts ask
  begin
    until %w( k ok y yes n no ).include?(answer = $stdin.gets.chomp.downcase)
      puts "(psst... please type y or n)"
      puts ask
    end
  rescue Interrupt
    return false
  end

  return false if answer =~ /n/

  return true
end

# --------------------
#
#     'hub'
#
def run_hub(args)
    display_help = false

    first_arg = args[0]
    if !first_arg.nil? and first_arg[0] == "-" # It's an option
        args.shift
        if first_arg == "--copy"
            OPTIONS[:copy] = true
        elsif first_arg == "--add"
            OPTIONS[:add] = true
        elsif first_arg == "--license"
            OPTIONS[:license] = true
        elsif first_arg == "--show"
            OPTIONS[:show] = true
        else
            display_help = true
        end
    end

    if OPTIONS[:license]
        puts "Adding MIT license file to current directory...".yellow
        File.open('LICENSE', 'w') { |file| file.write(license) }
        puts "Done!".green
        exit(0)
    end

    if OPTIONS[:show]
        repo_url = %x( git remote show origin | grep "Fetch URL" | cut -d' ' -f5 ).chomp
        unless repo_url.match(/^git@github\.com/)
            puts "This doesn't look like it's a Github repository.".red
            puts "Repo: #{repo_url}.".red
            exit(1)
        end
        repo = repo_url.match(/^git@github.com:([^\.]*)\.git$/)[1]
        puts "Github Repository: ".green + repo.blue
        exit(0)
    end

    if args.empty? or display_help
        # TODO : Display help
        help_error = <<EOF
        Oops, you're using this all wrong.
EOF
        help_info = <<EOF
        Examples:
        * hub stuff
        => Clones vyder/stuff

        * hub defunkt/dotjs
        => Clones defunkt/dotjs

        * hub --copy things
        => Copies "git@github.com:vyder/things.git" to clipboard

        * hub --add things
        => Runs `git remote origin git@github.com:vyder/things.git`

        * hub --license
        => Creates a new LICENSE file with the MIT license
EOF
        print help_error.red
        print help_info.blue
        exit(0)
    end

    input = args[0].split('/')

    repo = nil
    if input.size > 1
      user  = input[0]
      repo = input[1]
    else
      user = GITHUB_USER
      repo = input[0]
    end

    repo_url = git_repo_url_for(user, repo)
    repo_url_in_color = git_repo_url_for(user.blue, repo.blue)

    if OPTIONS[:copy]
        pbcopy(repo_url)
        puts "Copied #{repo_url.blue} to your clipboard!"
    elsif OPTIONS[:add]
        unless File.exist?(".git")
            puts "Oops, this place does not seem to have a git repo.".red
            exit(1)
        end

        add_repo = false

        # Check if this repo exists
        %x( git ls-remote #{repo_url} &>/dev/null )
        unless $?.exitstatus == 0
            # Is this a repo the user think he owns?
            if GITHUB_USER == user
                # Offer to create a new repo for him
                puts "Looks like you haven't created this repo yet.".yellow

                # Is 'gh' installed
                %x( which gh &>/dev/null )
                if $?.exitstatus == 0
                    create_repo = prompt("Would you like me to set that up for you? (y/n)".yellow)

                    if create_repo
                        puts "Creating ".yellow + user.blue + "/".yellow + repo.blue + "...".yellow
                        %x( gh repo --new #{repo} )
                        add_repo = true
                    else
                        add_repo = prompt("Would you like to add this remote repository anyway? (y/n)".yellow)
                    end
                else
                    puts "Looks like you don't have the 'gh' tool installed.".red
                    puts "I can't create remote repository for you.".red
                    puts "You can install it by running '".yellow + "npm install gh".blue + "'.".yellow
                    add_repo = prompt("Would you like to add this remote repository anyway? (y/n)".yellow)
                end
            else
                puts "I'm sorry that repository doesn't seem to exist.".red
                add_repo = prompt("Would you like to add it anyway? (y/n)".yellow)
            end
        else
            add_repo = true
        end

        if add_repo
            puts "Adding remote origin: ".light_yellow + repo_url_in_color
            %x( git remote add origin #{repo_url} )
        else
            puts "Aborting without taking any action.".red
            exit(1)
        end
    else
        puts "Assuming you mean '".light_yellow +
             user.blue +
             "/".light_yellow +
             repo.blue +
             "'.".light_yellow
        %x( git clone #{repo_url} )
    end
end

# Kickoff the script
run_hub(ARGV.dup)
